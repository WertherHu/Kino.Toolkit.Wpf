<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    >
    <!-- Color Resources -->
    <SolidColorBrush x:Key="Button.Static.Background"
                     Color="#f0f0f0" />
    <SolidColorBrush x:Key="Button.Static.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.MouseOver.Background"
                     Color="#e5e5e5" />
    <SolidColorBrush x:Key="Button.MouseOver.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Pressed.Background"
                     Color="#cccccc" />
    <SolidColorBrush x:Key="Button.Pressed.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Checked.Background"
                     Color="#cccccc" />
    <SolidColorBrush x:Key="Button.Checked.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Disabled.Background"
                     Color="#f0f0f0" />
    <SolidColorBrush x:Key="Button.Disabled.Border"
                     Color="Transparent" />
    <SolidColorBrush x:Key="Button.Disabled.Foreground"
                     Color="#9e9e9e" />

    <!-- Button -->
    <Style x:Key="BaseButtonStyle"
           TargetType="{x:Type ButtonBase}">
        <!--<Setter Property="FocusVisualStyle"
                Value="{StaticResource FocusVisual}" />-->
        <Setter Property="Background"
                Value="{StaticResource Button.Static.Background}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource Button.Static.Border}" />
        <Setter Property="Foreground"
                Value="#191919" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="12,6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                                          RecognizesAccessKey="True"
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                                    TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{StaticResource Button.MouseOver.Background}"
                                    TargetName="border" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource Button.MouseOver.Border}"
                                    TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{StaticResource Button.Pressed.Background}"
                                    TargetName="border" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource Button.Pressed.Border}"
                                    TargetName="border" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{StaticResource Button.Checked.Background}"
                                    TargetName="border" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource Button.Checked.Border}"
                                    TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Background"
                                    Value="{StaticResource Button.Disabled.Background}"
                                    TargetName="border" />
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource Button.Disabled.Border}"
                                    TargetName="border" />
                            <Setter Property="TextElement.Foreground"
                                    Value="{StaticResource Button.Disabled.Foreground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type ToggleButton}"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}"
                               Value="true" />
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                               Value="true" />
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}"
                               Value="false" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}"
                               Value="true" />
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                               Value="true" />
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}"
                               Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush"
                        Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type RepeatButton}"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false" />
    </Style>

    <Style x:Key="{x:Type Button}"
           BasedOn="{StaticResource BaseButtonStyle}"
           TargetType="{x:Type Button}" />
</ResourceDictionary>